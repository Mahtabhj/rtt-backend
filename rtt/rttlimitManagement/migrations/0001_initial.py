# Generated by Django 3.1.1 on 2021-12-01 12:17

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('rttregulation', '0022_auto_20211201_1210'),
        ('rttsubstance', '0005_auto_20211119_1143'),
    ]

    operations = [
        migrations.CreateModel(
            name='Exemption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('article', models.CharField(blank=True, max_length=100, null=True)),
                ('reference', models.CharField(blank=True, max_length=100, null=True)),
                ('application', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('expiration_date', models.DateTimeField()),
                ('date_into_force', models.DateTimeField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('deleted', 'Deleted')], default='active', max_length=20)),
            ],
            options={
                'verbose_name_plural': 'Exemptions',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='LimitAdditionalAttributeValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('value', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Limit additional attribute values',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='LimitAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(max_length=200)),
                ('field_type', models.CharField(choices=[('number', 'Number'), ('text_field', 'Text field'), ('list_field', 'List Field')], default='text_field', max_length=20)),
                ('list_values', models.TextField(blank=True, help_text='Enter values separated by a comma', null=True)),
            ],
            options={
                'verbose_name_plural': 'Limit attributes',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='RegulationSubstanceLimit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('scope', models.TextField(blank=True, null=True)),
                ('limit_value', models.FloatField(blank=True, null=True)),
                ('measurement_limit_unit', models.TextField(blank=True, null=True)),
                ('limit_note', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('deleted', 'Deleted')], default='active', max_length=20)),
                ('date_into_force', models.DateTimeField()),
                ('regulation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='regulation_regulation_substance_limit', to='rttregulation.regulation')),
                ('regulatory_framework', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='regulatory_framework_regulation_substance_limit', to='rttregulation.regulatoryframework')),
                ('substance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regulation_substance_limit', to='rttsubstance.substance')),
            ],
            options={
                'verbose_name_plural': 'Regulation substance limit',
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='RegulationLimitAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('limit_attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regulation_limit_attribute', to='rttlimitManagement.limitattribute')),
                ('regulation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='regulation_limit_attributes', to='rttregulation.regulation')),
                ('regulatory_framework', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='regulatory_framework_limit_attributes', to='rttregulation.regulatoryframework')),
            ],
            options={
                'verbose_name_plural': 'Regulation limit attributes',
                'ordering': ('-id',),
            },
        ),
        migrations.AddConstraint(
            model_name='limitattribute',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('field_type', 'list_field'), ('list_values__isnull', False)), models.Q(models.Q(_negated=True, field_type='list_field'), ('list_values__isnull', True)), _connector='OR'), name='list_values_when_field_type_is_list_field'),
        ),
        migrations.AddField(
            model_name='limitadditionalattributevalue',
            name='regulation_limit_attribute',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rttlimitManagement.regulationlimitattribute'),
        ),
        migrations.AddField(
            model_name='limitadditionalattributevalue',
            name='regulation_substance_limit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regulation_substance_limit_additional_attribute', to='rttlimitManagement.regulationsubstancelimit'),
        ),
        migrations.AddField(
            model_name='exemption',
            name='regulation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='regulation_exemption', to='rttregulation.regulation'),
        ),
        migrations.AddField(
            model_name='exemption',
            name='regulatory_framework',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='regulatory_framework_exemption', to='rttregulation.regulatoryframework'),
        ),
        migrations.AddField(
            model_name='exemption',
            name='substance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='substance_exemption', to='rttsubstance.substance'),
        ),
        migrations.AddConstraint(
            model_name='regulationsubstancelimit',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('regulatory_framework__isnull', False), ('regulation__isnull', True)), models.Q(('regulatory_framework__isnull', True), ('regulation__isnull', False)), _connector='OR'), name='only_regulatory_framework_or_regulation_in_regulation_substance_limit'),
        ),
        migrations.AddConstraint(
            model_name='regulationlimitattribute',
            constraint=models.UniqueConstraint(fields=('limit_attribute', 'regulation'), name='unique_regulation_limit_attribute'),
        ),
        migrations.AddConstraint(
            model_name='regulationlimitattribute',
            constraint=models.UniqueConstraint(fields=('limit_attribute', 'regulatory_framework'), name='unique_framework_limit_attribute'),
        ),
        migrations.AddConstraint(
            model_name='regulationlimitattribute',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('regulatory_framework__isnull', False), ('regulation__isnull', True)), models.Q(('regulatory_framework__isnull', True), ('regulation__isnull', False)), _connector='OR'), name='only_regulatory_framework_or_regulation_in_regulation_limit_attribute'),
        ),
        migrations.AddConstraint(
            model_name='limitadditionalattributevalue',
            constraint=models.UniqueConstraint(fields=('regulation_substance_limit', 'regulation_limit_attribute'), name='unique_regulation_substance_limit_additional_attribute'),
        ),
        migrations.AddConstraint(
            model_name='exemption',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('regulatory_framework__isnull', False), ('regulation__isnull', True)), models.Q(('regulatory_framework__isnull', True), ('regulation__isnull', False)), _connector='OR'), name='only_regulatory_framework_or_regulation_in_exemption'),
        ),
    ]
